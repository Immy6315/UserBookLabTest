import * as jwt from 'jsonwebtoken'
import { injectable, inject } from 'inversify';
import { TYPES } from '../types';

export interface TokenGenerator {
    generate(payload: any): string;
}

export interface TokenValidator {
    validate(token: string): any
}

@injectable()
export class JWTHandler implements TokenGenerator, TokenValidator {

    private privateKey: string | Buffer;
    constructor() {
        this.privateKey = "Imrankhan"
    }

    /**
     * Function to generate a new Token
     * @param payload The payload to put in the Token
     * @param options Options for signing the Token
     */
    public generate(payload: any): string {
        
        let signOptions: jwt.SignOptions = {
            issuer:  'NetMeds',
            expiresIn:  "12h",
        };

        return jwt.sign(payload, this.privateKey, signOptions);
    }

    /**
     * Function to validate a Token generated by the genrate method of this class
     */
    public validate(token: string): any {
        // console.log({token})

        let verificationOptions: jwt.VerifyOptions = {
            issuer: 'NetMeds',
        }

        // console.log(this.publicKey)

        return jwt.verify(token, this.privateKey, verificationOptions);
    }
}
